{"version":3,"sources":["imgs/logo.png","components/characters/characterItem.js","ui/search.js","components/characters/characterGrid.js","ui/header.js","ui/footer.js","ui/text.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","characterItem","item","className","src","img","alt","name","portrayed","nickname","birthday","status","Search","getName","useState","text","setText","type","placeholder","value","onChange","e","q","target","autoFocus","characterGrid","items","isLoading","map","key","char_id","header","logo","footer","App","setItems","setIsLoading","setName","useEffect","a","axios","result","console","log","data","fetchItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,kNCgC5BC,EA9BO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAErB,OACI,yBAAKC,UAAU,QACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QAAQC,IAAKF,EAAKG,IAAKC,IAAI,MAE5C,yBAAKH,UAAU,aACb,4BAAKD,EAAKK,MACV,4BACE,4BACE,+CADF,IACgCL,EAAKM,WAErC,4BACE,6CADF,IAC8BN,EAAKO,UAEnC,4BACE,6CADF,IAC8BP,EAAKQ,UAEnC,4BACE,2CADF,IAC4BR,EAAKS,aCGhCC,EAxBA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,KAQ9B,OACE,6BAASb,UAAU,UACjB,8BACE,2BACEc,KAAK,OACLd,UAAU,eACVe,YAAY,0BACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAbAC,EAagBD,EAAEE,OAAOJ,MAZzCH,EAAQM,QACRT,EAAQS,GAFO,IAACA,GAcVE,WAAS,OCLJC,EAVO,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MACpB,OAD0C,EAAfC,UACP,kCACpB,6BAASxB,UAAU,SACbuB,EAAME,KAAI,SAAC1B,GAAD,OACR,kBAAC,EAAD,CAAe2B,IAAK3B,EAAK4B,QAAS5B,KAAMA,S,iBCKrC6B,EATA,WAEP,OACA,4BAAQ5B,UAAU,UACd,yBAAKC,IAAK4B,IAAM1B,IAAI,OCEjB2B,EARA,WACX,OACI,yBAAK9B,UAAU,UACb,wDCKKY,EARF,WACT,OACI,yBAAKZ,UAAU,QACX,+HCmCG+B,G,MA3BH,WAAM,IAAD,EACYpB,mBAAS,IADrB,mBACRY,EADQ,KACDS,EADC,OAEsBrB,oBAAS,GAF/B,mBAENa,EAFM,KAEKS,EAFL,OAGYtB,mBAAS,IAHrB,mBAGNP,EAHM,KAGA8B,EAHA,KAef,OAVEC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,sEACIC,IAAK,6DAAwDjC,IADjE,OACXkC,EADW,OAEjBC,QAAQC,IAAIF,EAAOG,MAEnBT,EAASM,EAAOG,MAChBR,GAAa,GALI,2CAAH,qDAOhBS,KACF,CAACtC,IAEH,yBAAKJ,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQU,QAAS,SAACS,GAAD,OAAOe,EAAQf,MAChC,kBAAC,EAAD,CAAeK,UAAWA,EAAWD,MAAOA,IAC5C,kBAAC,EAAD,SCtBcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.ce869e4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","import React from 'react'\r\n\r\nconst characterItem = ({ item }) => {\r\n    \r\n    return (\r\n        <div className='card'>\r\n        <div className='card-inner'>\r\n          <div className='card-front'>\r\n            <img className='photo' src={item.img} alt='' />\r\n          </div>\r\n          <div className='card-back'>\r\n            <h1>{item.name}</h1>\r\n            <ul>\r\n              <li>\r\n                <strong>Actor Name:</strong> {item.portrayed}\r\n              </li>\r\n              <li>\r\n                <strong>Nickname:</strong> {item.nickname}\r\n              </li>\r\n              <li>\r\n                <strong>Birthday:</strong> {item.birthday}\r\n              </li>\r\n              <li>\r\n                <strong>Status:</strong> {item.status}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default characterItem\r\n","import React, { useState } from 'react'\r\n\r\nconst Search = ({ getName }) => {\r\n  const [text, setText] = useState('')\r\n\r\n  const onChange = (q) => {\r\n    setText(q)\r\n    getName(q)\r\n  }\r\n\r\n  return (\r\n    <section className='search'>\r\n      <form>\r\n        <input\r\n          type='text'\r\n          className='form-control'\r\n          placeholder='Type characters name...'\r\n          value={text}\r\n          onChange={(e) => onChange(e.target.value)}\r\n          autoFocus\r\n        />\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport CharacterItem from '../characters/characterItem'\r\nimport spinner from '../../ui/search'\r\n\r\nconst characterGrid = ({items, isLoading}) => {\r\n    return isLoading ? (<spinner/>) : (\r\n    <section className='cards'>\r\n        { items.map((item) => (\r\n            <CharacterItem key={item.char_id} item={item}></CharacterItem>\r\n        ))}\r\n    </section>\r\n    )\r\n}\r\n\r\nexport default characterGrid","import React from 'react'\r\n\r\nimport logo from '../../src/imgs/logo.png'\r\n\r\nconst header = () => {\r\n    \r\n        return (\r\n        <header className='center'>\r\n            <img src={logo} alt='' />\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default header","import React from 'react'\r\n\r\nconst footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n          <p>&copy;Sharif Hossain 2020</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default footer\r\n","import React from 'react'\r\n\r\nconst text = () => {\r\n    return (\r\n        <div className=\"text\">\r\n            <p>You will find all the characters from Breaking Bad. Search any Breaking Bad character by name.</p>           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default text","import React, {useState, useEffect } from 'react';\nimport axios from  'axios'\nimport CharacterGrid from '../src/components/characters/characterGrid'\nimport Header from './ui/header'\nimport characterGrid from './components/characters/characterGrid';\nimport Search from './ui/search';\nimport Footer from './ui/footer'\nimport HeaderText from './ui/text'\nimport './App.css';\n\n\n\n\nconst App = ()=> {\n  const [items, setItems ] = useState([])\n    const [isLoading, setIsLoading ] = useState(true)\n    const [name, setName ] = useState('')\n\n    useEffect(()=> {\n        const fetchItems = async () => {  \n          const result = await axios (`https://www.breakingbadapi.com/api/characters?name=${name}`)\n          console.log(result.data)\n\n          setItems(result.data)\n          setIsLoading(false)\n        }\n        fetchItems();\n    },[name]);\n  return (\n    <div className=\"container\">\n      <Header/>\n      <HeaderText/>\n      <Search getName={(q)=>  setName(q)}/>\n      <CharacterGrid isLoading={isLoading} items={items}/>\n      <Footer/>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}